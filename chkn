#!/usr/bin/perl
# ターミナルで使える漢字直接入力のための単純なツール
# 起動方法
# a. 既定のコードマッピングを使う (code/*)
#    ./chkn
# b. 言語を指定する
#    CHKN_LANG=jpn ./chkn # 日本語モード（既定）
#    CHKN_LANG=cht ./chkn # 中国語繁体字モード
# c. 任意のマッピングファイルを使う
#    ./chkn TABLE1 TABLE2
#
# リターンを押す度にテキストをコピーしたりどこかに送信するには$COPY_TOOLの環境
# 変数を指定します。リターンを押すと、このCOPY_TOOLが起動されSTDINにテキストが
# 書き込まれます。例：Mac OS Xの場合、これをpbcopyに設定すると便利です。
#
# COPY_TOOL=pbcopy ./chkn

use strict;
use utf8;
use warnings;

use FindBin;
use Term::ReadKey;

binmode STDERR, ':utf8';
binmode STDOUT, ':utf8';

my $lang = $ENV{CHKN_LANG} // 'jpn';
my $stats_mode = !!$ENV{CHKN_STATS};

my %rad_to_key = (
    一 => 'a',
    丿 => 'a',
    二 => 'a',
    亠 => 'a',
    𠆢 => 'b',
    人 => 'b',
    亻 => 'b',
    入 => 'c',
    八 => 'c',
    冖 => 'c',
    冫 => 'c',
    几 => 'c',
    刀 => 'c',
    力 => 'c',
    十 => 'c',
    卜 => 'c',
    卩 => 'd',
    厂 => 'd',
    厶 => 'd',
    口 => 'd',
    囗 => 'e',
    土 => 'e',
    士 => 'e',
    夊 => 'e',
    夕 => 'e',
    大 => 'e',
    女 => 'f',
    小 => 'f',
    宀 => 'f',
    山 => 'g',
    巛 => 'g',
    工 => 'g',
    己 => 'g',
    巾 => 'g',
    幺 => 'g',
    广 => 'g',
    彑 => 'h',
    彳 => 'h',
    心 => 'h',
    忄 => 'h',
    㣺 => 'h',
    戈 => 'i',
    戸 => 'i',
    手 => 'i',
    扌 => 'i',
    攵 => 'j',
    攴 => 'j',
    文 => 'j',
    斗 => 'j',
    旡 => 'j',
    日 => 'j',
    曰 => 'j',
    月 => 'j',
    木 => 'k',
    欠 => 'l',
    止 => 'l',
    殳 => 'l',
    氵 => 'm',
    水 => 'm',
    氺 => 'm',
    火 => 'n',
    灬 => 'n',
    爪 => 'n',
    父 => 'n',
    爻 => 'n',
    玄 => 'n',
    玉 => 'o',
    田 => 'o',
    疋 => 'o',
    𤴔 => 'o',
    疒 => 'o',
    白 => 'p',
    皮 => 'p',
    皿 => 'p',
    目 => 'p',
    矛 => 'p',
    矢 => 'p',
    石 => 'p',
    禾 => 'q',
    穴 => 'q',
    立 => 'q',
    缶 => 's',
    羊 => 's',
    飛 => 't',
    耳 => 't',
    肉 => 't',
    臣 => 't',
    臼 => 't',
    舌 => 't',
    艹 => 'u',
    虍 => 'v',
    言 => 'w',
    豸 => 'x',
    貝 => 'x',
    足 => 'x',
    𧾷 => 'x',
    身 => 'x',
    辶 => 'y',
    酉 => 'y',
    門 => ';',
    阜 => ';',
    隹 => ';',
    雨 => ';',
    韭 => ';',
    音 => ';',
    食 => ',',
    骨 => ',',
    鬥 => ',',
    鬯 => '.',
    魚 => '.',
    鳥 => '.',
    鹵 => '.',
    黑 => '/',
    龜 => '/',
    龠 => '/',
);

my @yomiken = (
    'b'..'d',
    'f'..'h',
    'j'..'n',
    'p'..'t',
    'v'..'z',
    ';',
    ',',
    '.',
    '/',
);

my @yomi_ranges = qw{ア エキ カイ カン キ キヨ ケ コ コク シ シヤ シヨ シン セキ ソウ タイ チヨ テン トク ハン フ ホ マ ラ ル};

@yomiken == @yomi_ranges or die;

# 2~3打鍵コードの文字列 => 実際に入力される文字・文字列
my %codes;

# 間違いやすい字の実際ではないけど調べ得るコードプレフィックス
# 例えば、合の部首は口《ｄ》けれど、人《ｂ》と思い込む可能性がある
# なので、上記の%codesマップにdkg->合と云うエントリーがあるのに対して
# %suggestionsに"bg"と云うキーがあって、配列リファレンスの値に
# "dkg -> 合 (部首＝口)"のような文字列が含まれている。
#
# 入力コードプレフィックス => 入力したいと思われる漢字などの配列
my %suggestions;

my @codes_files = @ARGV;
my @entered_text;
my @uncommitted;

my @kanji_keys = ('a'..'z', q{;}, q{,}, q{.}, q{/});

sub shift_key {
    my ($key) = @_;
    $key =~ tr{1-90[a-z];,./}{!@#$%^&*()[A-Z]:<>?};
    return $key;
}

sub term_copy {
    my $copy_tool = $ENV{COPY_TOOL};
    if (!$copy_tool) {
        return;
    }

    open my $tool_proc, '|-', $copy_tool
        or die "Cannot run '$copy_tool': $!";
    binmode $tool_proc, ':utf8';
    print $tool_proc @_;
}

sub clear_screen {
    print "\033[2J";
}

sub erase_to_eol {
    print "\033[K";
}

# 漢字の優先度マッピング
# 使用頻度と似た概念
#  5 - 最も高い優先度
#  4 - やや低い
#  3 - もっと低い
# など..
#  ..
#  マップに無い - この漢字を使わない
my %kanji_to_priority;
{
    open my $priority, '<', "$FindBin::Bin/priority/$lang";
    binmode $priority, ':utf8';
    my $priority_level = 5;
    while (my $line = <$priority>) {
        next if $line =~ m/^#/;
        chomp $line;
        for my $kanji (split q{}, $line) {
            $kanji_to_priority{$kanji} = $priority_level;
        }
        $priority_level--;
    }
}

# ターミナル上の字の幅を返す
# 半角の場合：1
# 全角の場合：2
# 文字列の長さが2以上の場合、全文字合計の幅を返す
sub char_width {
    my ($s) = @_;
    my $total = 0;

    # 幅を持たない色のコードを消す
    $s =~ s/\e\[\d\dm//g;

    for my $char (split q{}, $s) {
        my $ord = ord $char;
        if ($ord <= 0xff) {
            $total += 1;
        } elsif ($ord >= 0xff01 && $ord <= 0xff60) {
            # 全角英数字
            $total += 2;
        } elsif ($ord >= 0xff61 && $ord <= 0xffdc) {
            # 半角カタカナ
            $total += 1;
        } elsif ($ord >= 0xf900 && $ord < 0xfb00) {
            # CJK Compatibility Ideographs
            $total += 2;
        } elsif ($ord >= 0x10000) {
            # surrogate pair (多分、漢字)
            $total += 2;
        } elsif ($ord >= 0x3000 && $ord <= 0x30fe) {
            # 平仮名／片仮名
            $total += 2;
        } elsif ($ord >= 0x3200 && $ord < 0xa000) {
            # Enclosed CJK Letters [3200, 3300)
            # CJK 互換             [3300, 3400)
            # "Rare" CJK           [3400, 4e00)
            # 漢字                 [4e00, 0xa000)
            $total += 2;
        } else {
            $total += 1;
        }
    }

    return $total;
}

my @pri_colors;
{
    # 色のコードとエスケープコードは
    # https://en.wikipedia.org/wiki/ANSI_escape_code
    # を参考に
    my $theme = $ENV{CHKN_COLOR_THEME} // q{};
    @pri_colors =
        $theme eq q{bright_bg} ? ("\e[34m", "\e[31m", "\e[32m", "\e[33m") :
        $theme eq q{off}       ? (                                      ) :
        $theme eq q{}          ? ("\e[93m", "\e[96m", "\e[95m", "\e[91m") :
        die "Unknown value for CHKN_COLOR_THEME: $theme";
}

sub guide_ji  {
    my ($key) = @_;
    my $raw_ji = $codes{$key};
    my $padding = q{ } x (2 - char_width $raw_ji);
    my $priority = $kanji_to_priority{$raw_ji} // 0;
    my $pri_color = $pri_colors[5 - $priority] // q{};
    return "$pri_color$raw_ji\e[39m$padding";
}

if (!@codes_files) {
    my $code_dir_path = "$FindBin::Bin/code";
    opendir my $code_dir, $code_dir_path or die;
    while (my $code_file = readdir($code_dir)) {
        push @codes_files, "$code_dir_path/$code_file";
    }
}

sub simplify_yomi {
    my ($a) = @_;
    # 読み鍵を決定する際、ひら・カタを区別しないので、ひらがなをカタカナに変換
    # する
    $a =~ tr/ぁ-ゖ/ァ-ヶ/;
    $a =~ tr/ャュョ/ヤユヨ/;
    # 半濁音と濁音も無視するので、濁点を取り除く
    $a =~ tr{ガギグゲゴザジズゼゾダヂヅデドバビブベボパピプペポ}
            {カキクケコサシスセソタチツテトハヒフヘホハヒフヘホ};
    return $a;
}

sub read_codes {
    %codes = ();
    %suggestions = ();
    my %unassigned_by_priority;
    my %total_by_priority;
    my $total_assigned;

    for my $codes_file (@codes_files) {
        open my $codes, $codes_file
            or die "Cannot open $codes_file: $!";
        binmode $codes, ':utf8';

        while (my $line = <$codes>) {
            chomp $line;

            my ($key, $value, @notes) = split m/\t/, $line;
            if (!defined $value) {
                print STDERR "Could not process code: $line\n";
                die;
            }

            my $priority = $kanji_to_priority{$value};
            next if !defined($priority) and $codes_file =~ m#/kanji\.#;

            if ($stats_mode && $codes_file =~ m#/kanji.[^/]+$#) {
                $total_by_priority{$priority}++;
                if (length($key) > 3) {
                    # コードが３文字以上だと入力できないので、
                    # 未割り当てとして見なす
                    my $pri_array = $unassigned_by_priority{$priority} //= [];
                    push @$pri_array, $value;
                } else {
                    $total_assigned++;
                }
            }

            # コードが衝突する場合、自動的にコードを整理
            # 優先度の低い方をシフトコードに移す
            if (defined $codes{$key}) {
                die if length($key) != 3;
                my $shift_key =
                    substr($key, 0, 2) . shift_key(substr($key, 2));
                die "$codes_file $key $shift_key"
                    if defined($codes{$shift_key});

                if ($kanji_to_priority{$value} >
                        $kanji_to_priority{$codes{$key}}) {
                    $codes{$shift_key} = $codes{$key};
                    delete $codes{$key};
                } else {
                    $key = $shift_key;
                }
            }

            die "Duplicate code: $key" if defined $codes{$key};
            $codes{$key} = $value;

            # hbかhyの注がある場合は%suggestionsのマップを拡張する

            # hyに相当する読み鍵を計算する
            my @hy_keys = map {
                # yomikenとyomi_rangesを使って読みから読み鍵の変換を行う
                my $yomi = simplify_yomi $_;
                my $match_id = $#yomi_ranges;
                for my $id (0..($#yomi_ranges-1)) {
                    if (($yomi_ranges[$id + 1] cmp $yomi) > 0) {
                        $match_id = $id;
                        last;
                    }
                }
                $yomiken[$match_id];
            } map {substr $_, 2} grep {$_ =~ /^hy/} @notes;

            # hbに相当する部首鍵を計算する
            my @hb_keys = map {
                if (!$rad_to_key{$_}) {
                    print STDERR "radical not in \%rad_to_key: $_\n";
                    die;
                }
                $rad_to_key{$_};
            } map {substr $_, 2} grep {$_ =~ /^hb/} @notes;

            # 実際の読み・部首は明記されている場合、サジェストに入れる
            my @code_source_notes = map {
                my $x = $_;
                $x =~ s/^y/読み＝/;
                $x =~ s/^b/部首＝/;
                $x;
            } grep {
                $_ =~ /^[yb]/;
            } @notes;

            next if !@hb_keys && !@hy_keys;
            my $code_help = "$key => $value";
            if (@code_source_notes) {
                local $";
                $" = q{、};
                $code_help .= " (@code_source_notes)";
            }

            my $b_key = substr $key, 0, 1;
            my $y_key = substr $key, 1, 1;
            for my $b ($b_key, @hb_keys) {
                for my $y ($y_key, @hy_keys) {
                    next if $b eq $b_key && $y eq $y_key;

                    my $array = $suggestions{"$b$y"} //= [];
                    push @$array, $code_help;
                }
            }
        }
    }

    # コードファイルに入っていないか設定言語のＬノートが付いていないのに、常用
    # されている漢字があれば、コードファイルを直す必要がある。コードを割り当て
    # るか、Lノートを追加しよう。
    my %code_by_kanji = reverse %codes;
    for my $ji (keys %kanji_to_priority) {
        die sprintf("%X", ord($ji)) if not defined $code_by_kanji{$ji};
    }

    if ($stats_mode) {
        my $total_unassigned = 0;
        for my $level (reverse sort keys %unassigned_by_priority) {
            my $dim = 2;
            my $array = $unassigned_by_priority{$level};
            my $n = @$array;
            my $d = $total_by_priority{$level};
            printf "pri %d(%d/%d unassigned, %.2f%% assigned):\n", $level,
                $n, $d,
                100 - $n / $d * 100;
            while ($dim * $dim * 3 < @$array * 4) {
                $dim++;
            }
            my @img;
            for (my $i = 0; $i < ($dim * $dim); $i++) {
                push @img, q{　};
            }
            $total_unassigned += @$array;
            for my $kanji (sort @$array) {
                my $hash = ord($kanji);
                my $x = 0;
                my $y = 0;
                for (my $i = 0; $i < 7; $i++) {
                    $y <<= 1;
                    $y |= $hash & 1;
                    $hash >>= 1;
                    $x <<= 1;
                    $x |= $hash & 1;
                    $hash >>= 1;
                }
                $x *= ($dim - 1);
                $y *= ($dim - 1);
                {
                    use integer;
                    $x /= 127;
                    $y /= 127;
                }
                while ($img[$x + ($y * $dim)] ne q{　}) {
                    if ($y & 1) {
                        if (--$x < 0) {
                            $x = 0;
                            $y++;
                        }
                    } elsif (++$x >= $dim) {
                        $x = $dim - 1;
                        $y++;
                    }
                    if ($y >= $dim) {
                        $y = 0;
                        $x = 0;
                    }
                }
                $img[$x + ($y * $dim)] = $kanji;
            }
            for (my $y = 0; $y < $dim; $y++) {
                for (my $x = 0; $x < $dim; $x++) {
                    print $img[$x + ($y * $dim)];
                }
                print "\n";
            }
            print "\n";
        }
        print "合計漢字数\n";
        print "unassigned: $total_unassigned\n";
        printf "assigned: $total_assigned (%.1f%%)\n",
            ($total_assigned * 100 / ($total_assigned + $total_unassigned));

        # 部首＋読みの750個の組み合わせそれぞれに該当する漢字数を計算する
        my %lcase_count;
        my %ucase_count;
        my @prefixes;
        for my $first_key (@kanji_keys) {
            for my $second_key (@kanji_keys) {
                next if $second_key =~ m/[aiueo]/;
                my $prefix = "$first_key$second_key";
                my $lcase_occupied_count = 0;
                my $ucase_occupied_count = 0;
                for my $third_key (@kanji_keys) {
                    my $lcase_code = $prefix . $third_key;
                    my $ucase_code = $prefix . shift_key($third_key);
                    if (defined $codes{$lcase_code}) {
                        $lcase_occupied_count++;
                        if (defined $codes{$ucase_code}) {
                            $ucase_occupied_count++;
                        }
                    } elsif (defined $codes{$ucase_code}) {
                        print "${lcase_code}に該当する漢字がないのに、";
                        print "${ucase_code}に「$codes{$ucase_code}」が";
                        print "割り当てられている。\n";
                    }
                }
                $lcase_count{$prefix} = $lcase_occupied_count;
                $ucase_count{$prefix} = $ucase_occupied_count;
                push @prefixes, $prefix;
            }
        }
        @prefixes = sort { $lcase_count{$b} <=> $lcase_count{$a} } @prefixes;
        printf "\nprefix code# codE#\n";
        for my $prefix (@prefixes) {
            my $lcase= $lcase_count{$prefix} // 0;
            my $ucase= $ucase_count{$prefix} // 0;
            printf "%s     %5d %5d\n", $prefix, $lcase, $ucase;
        }
        print "\n";
        exit 0;
    }
}
read_codes;

ReadMode 4; # Turn off controls keys

my @input_history;

sub print_keyboard_row {
    my ($left_padding, $key_names, $keyboard_ref) = @_;
    my @key_name_array = split q{}, $key_names;

    my $draw_frame = !$keyboard_ref;
    $keyboard_ref //= {};

    if ($draw_frame) {
        print $left_padding;
        my $separator = q{};
        for my $key_name (@key_name_array) {
            if ($key_name eq q{ }) {
                print q{  };
                next;
            }
            printf '%s┌%s ┐', $separator, $key_name;
            $separator = q{ };
        }
        erase_to_eol;
    }
    print "\n";
    print $left_padding;
    for my $key_name (@key_name_array) {
        if ($key_name eq q{ }) {
            print q{  };
            next;
        }
        my $key_value = $keyboard_ref->{$key_name} || q{  };
        my $shift_value = $keyboard_ref->{shift_key $key_name} || q{│ };
        if (char_width($key_value) > 2) {
            $key_value = q{..};
        }
        if (char_width($shift_value) > 2) {
            $shift_value = q{..};
        }
        printf '│%s%s', $key_value, $shift_value;
    }
    erase_to_eol;
    print "\n";
    if ($draw_frame) {
        print $left_padding;
        my $separator = q{};
        for my $key_name (@key_name_array) {
            if ($key_name eq q{ }) {
                print q{  };
                next;
            }
            my $index_finger_key = $key_name eq 'f' || $key_name eq 'j';
            printf '%s└%s┘', $separator, ($index_finger_key ? '==' : '──');
            $separator = q{ };
        }
        erase_to_eol;
    }
}

# The argument is a hash from keys (e.g. 'f') to something to draw inside the
# keyboard in the guide. If the key is omitted in the map, the key is kept
# blank. Otherwise, it should be a single wide character.
# If that argument is omitted, then it only draws the keyboard outline.
sub print_keyboard {
    my ($keyboard_ref) = @_;

    my ($width, $height) = GetTerminalSize;
    printf "\033[%d;0H", ($height - 8);

    print_keyboard_row q{}, 'qwert yuiop', $keyboard_ref;
    print "\n";
    print_keyboard_row q{  }, 'asdfg hjkl;', $keyboard_ref;
    print "\n";
    print_keyboard_row q{    }, 'zxcvb nm,./', $keyboard_ref;
}

my $last_term_size = q{};
sub maybe_refresh_screen {
    my $term_size = join q{,}, GetTerminalSize;
    return if $term_size eq $last_term_size;
    $last_term_size = $term_size;

    clear_screen;

    printf "\033[0;0H";
    for my $past_input (@input_history) {
        print "$past_input\n";
    }

    print_keyboard;
}

# 標準入力からキーを一つ読むか、Alt+キーを読む
sub read_key_chord {
    my $first_key = ReadKey 0;
    return $first_key if ord($first_key) != 27;
    return $first_key . ReadKey(0);
}

while (1) {
    local $";
    $" = q{};

    maybe_refresh_screen;

    # Jump to underneath the last input history item
    printf "\033[%d;0H", scalar(@input_history) + 1;

    print "@entered_text";
    if (@uncommitted) {
        print "<@uncommitted>";
    }

    erase_to_eol;

    my $key = read_key_chord;
    if ($key eq "\eh") {
        my $prefix = join q{}, @uncommitted;
        print "\n";
        my $suggestions = $suggestions{$prefix} // [];
        for my $suggestion (@$suggestions) {
            print "$suggestion\n";
        }
        read_key_chord;
        next;
    } elsif ($key eq "\eb") {
        print <<"BUSHU_CHART";

鍵  部首
---------------------------------------------------
a   一 丨 丶 丿 乙 亅  【二画】二 亠
b   人
c   儿 入 八 冂 冖 冫 几 凵 刀 力 勹 匕 匚 匸 十 卜
d   卩 厂 厶 又  【三画】口 ツ
e   囗 土 士 夂 夊 夕 大
f   女 子 宀 寸 小 尢
g   尸 屮 山 巛 工 己 巾 干 幺 广 廴 廾
h   弋 弓 彐 彡 彳  【四画】心
i   戈 戶 手
j   支 攴 文 斗 斤 方 无 日 曰 月
k   木
l   欠 止 歹 殳 毋 比 毛 氏 气
m   水
n   火 爪 父 爻 爿 片 牙 牛 犬【五画】玄
o   玉 瓜 瓦 甘 生 用 田 疋 疒
p   癶 白 皮 皿 目 矛 矢 石
q   示 禸 禾 穴 立
r   竹  【六画】米
s   糸 缶 网 羊
t   羽 老 而 耒 耳 聿 肉 臣 自 至 臼 舌 舛 舟
u   艮 色 艸
v   虍 虫 血 行 衣
w   襾  【七画】見 角 言 谷 豆 豕
x   豸 貝 赤 走 足 身 車
y   辛 辰 辵 邑 酉 釆 里
z 【八画】金
;   長 門 阜 隶 隹 雨 靑 非【九画】面 革 韋 韭 音
,   頁 風 飛 食 首 香【十画】馬 骨 高 髟 鬥
.   鬯 鬲 鬼 【十一画】魚 鳥 鹵
/   鹿 麥 麻 黃【十二画以上】黍 黑 黹 黽 鼎 鼓 鼠
    鼻 齊 齒 龍 龜 龠
BUSHU_CHART
        read_key_chord;
        next;
    } elsif ($key eq "\eq") {
        last;
    }
    next if length($key) == 2;
    if (ord($key) < 0x20 && $key ne "\n") {
        next;
    }

    if ($key eq "\n") {
        if (@uncommitted) {
            push @entered_text, @uncommitted;
            @uncommitted = ();
        } elsif (!@entered_text) {
            @input_history = ();
            # 開発中はコードを調整・追加するので、コードを最読込
            read_codes;

            # 乱れている場合があるので、キーボードを最描画する
            clear_screen;
            print_keyboard;
        } else {
            my $completed_text = join q{}, @entered_text;
            push @input_history, $completed_text;
            term_copy $completed_text;
            @entered_text = ();
        }
    } elsif (ord($key) == 127) {
        # Backspace
        if (@uncommitted) {
            pop @uncommitted;
        } elsif (@entered_text) {
            pop @entered_text;
        }
    } else {
        push @uncommitted, $key;
    }

    while (@uncommitted > 3) {
        push @entered_text, shift(@uncommitted);
    }

    for (my $i = 0; $i < 2; $i++) {
        my $maybe_code = join q{}, @uncommitted;
        if ($codes{$maybe_code}) {
            push @entered_text, $codes{$maybe_code};

            if (length($maybe_code) == 3) {
                my @chars = split q{}, $maybe_code;
                my %keyboard = (
                    $chars[0] => '1 ',
                    $chars[1] => '2 ',
                    $chars[2] => guide_ji($maybe_code),
                );
                print_keyboard \%keyboard;
            }
            @uncommitted = ();
        }

        while (@uncommitted >= 3) {
            push @entered_text, shift(@uncommitted);
        }
    }

    my %keyboard = ();
    for my $key (@kanji_keys, map {shift_key $_} @kanji_keys) {
        my $suggested_code = join q{}, @uncommitted, $key;
        if ($codes{$suggested_code}) {
            $keyboard{$key} = guide_ji $suggested_code;
        }
    }
    if (%keyboard) {
        print_keyboard \%keyboard;
    }
}

ReadMode 1;
