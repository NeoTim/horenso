#!/usr/bin/perl
# Copyright 2016 Google Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

use strict;
use utf8;
use warnings;

use FindBin;
use lib $FindBin::Bin;
use ReadCodes;

binmode STDERR, ':utf8';
binmode STDOUT, ':utf8';

my %kanji_to_priority;
ReadCodes::load_priorities(\%kanji_to_priority);

my %unassigned_by_priority;
my %ji_set_by_priority;
my %assigned;
my %assigned_count_by_prefix;

ReadCodes::process_lines {
    my ($key, $value, %notes_by_prefix) = @_;

    return if length($key) < 3;

    my $prefix = substr($key, 0, 2);
    for my $variant (ReadCodes::sorted_variants($value, %notes_by_prefix)) {
        # コードが３文字以上だと入力できないので、
        # 未割り当てとして見なす
        my $is_assigned = (length($key) == 3);

        $assigned_count_by_prefix{$prefix}++ if $is_assigned;
        my $priority = $kanji_to_priority{$variant};

        next if !defined($priority);

        $ji_set_by_priority{$priority}->{$variant} = 1;
        if (!$is_assigned) {
            my $pri_array = $unassigned_by_priority{$priority} //= [];
            push @$pri_array, $variant;
        } else {
            $assigned{$variant} = 1;
        }
    }
};

my $total_unassigned = 0;
for my $level (reverse sort keys %unassigned_by_priority) {
    my $dim = 2;
    my $array = $unassigned_by_priority{$level};
    my $u = @$array;
    my $a = keys($ji_set_by_priority{$level}) - $u;
    printf "pri %d - %d assigned (%.2f%%), %d unassigned, %d total:\n",
    $level, $a, $a / ($a + $u) * 100, $u, $a + $u;

    while ($dim * $dim * 3 < @$array * 4) {
        $dim++;
    }
    my @img;
    for (my $i = 0; $i < ($dim * $dim); $i++) {
        push @img, q{　};
    }
    $total_unassigned += @$array;
    for my $kanji (sort @$array) {
        my $hash = ord($kanji);
        my $x = 0;
        my $y = 0;
        for (my $i = 0; $i < 7; $i++) {
            $y <<= 1;
            $y |= $hash & 1;
            $hash >>= 1;
            $x <<= 1;
            $x |= $hash & 1;
            $hash >>= 1;
        }
        $x *= ($dim - 1);
        $y *= ($dim - 1);
        {
            use integer;
            $x /= 127;
            $y /= 127;
        }
        while ($img[$x + ($y * $dim)] ne q{　}) {
            if ($y & 1) {
                if (--$x < 0) {
                    $x = 0;
                    $y++;
                }
            } elsif (++$x >= $dim) {
                $x = $dim - 1;
                $y++;
            }
            if ($y >= $dim) {
                $y = 0;
                $x = 0;
            }
        }
        $img[$x + ($y * $dim)] = $kanji;
    }
    for (my $y = 0; $y < $dim; $y++) {
        for (my $x = 0; $x < $dim; $x++) {
            print $img[$x + ($y * $dim)];
        }
        print "\n";
    }
    print "\n";
}
print "合計漢字数\n";
print "unassigned: $total_unassigned\n";
my $total_assigned = keys(%assigned);
printf "assigned: %d (%.1f%%)\n",
    $total_assigned,
    ($total_assigned * 100 / ($total_assigned + $total_unassigned));

print "\ncode# prefix\n";
my @prefixes = map { sprintf "%5d %s\n", $assigned_count_by_prefix{$_}, $_ }
                   keys %assigned_count_by_prefix;

print join(q{}, reverse(sort @prefixes));
