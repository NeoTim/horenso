#!/usr/bin/perl
# Copyright 2016 Google Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# 静的コードテーブルを出力します。

use strict;
use utf8;
use warnings;

use Encode qw(encode);
use FindBin;
use lib $FindBin::Bin;

use CodeMap;
use ReadCodes;
use Getopt::Std;

binmode STDOUT, ':utf8';
binmode STDERR, ':utf8';

my %formats = (
    kanchoku_win => {
        encoding => 'cp932',
        value_format => qq{"%s"\r\n},
        autogen_args => {
            TYPE_KANJI_IN_CAPS => 0,
            TYPE_KATAKANA_IN_CAPS => 0,
        },
        heading => <<"HEADING",
;; Copyright 2016 Google Inc. All rights reserved.\r
;;\r
;; Licensed under the Apache License, Version 2.0 (the "License");\r
;; you may not use this file except in compliance with the License.\r
;; You may obtain a copy of the License at\r
;;\r
;;      http://www.apache.org/licenses/LICENSE-2.0\r
;;\r
;; Unless required by applicable law or agreed to in writing, software\r
;; distributed under the License is distributed on an "AS IS" BASIS,\r
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r
;; See the License for the specific language governing permissions and\r
;; limitations under the License.\r
\r
#define table-name "HRS"\r
#define key-layout QWERTY-JIS\r
\r
;; 漢直WinはCAPSLOCKを無視するらしいので、"a"を２回打つことでカタカナモードへ\r
;; の切り替えを可能にします。\r
-20>-20>\@K\r
\r
HEADING
    },
    horenso => {
        encoding => 'UTF-8',
        value_format => qq{\t%s\n},
        autogen_args => {
            TYPE_KANJI_IN_CAPS => 1,
            TYPE_KATAKANA_IN_CAPS => 1,
        },
        heading => q{},
    },
    # グーグル日本語入力形式
    # ほー連想形式と変わらないけれど、登録できるコード数は10,000だけなので、
    # TYPE_KANJI_IN_CAPSをオフにします。
    google_ime => {
        encoding => 'UTF-8',
        value_format => qq{\t%s\n},
        autogen_args => {
            TYPE_KANJI_IN_CAPS => 0,
            TYPE_KATAKANA_IN_CAPS => 1,
        },
        heading => q{},
    }
);

my %opts;
getopts('h', \%opts);
my $usage_error = 0;
my $format_name = shift(@ARGV) // 'horenso';
my $format = $formats{$format_name};

$usage_error = 1 if !defined($format);
$usage_error = 1 if @ARGV;

if ($usage_error || $opts{h}) {
    my $format_list = join(q{ }, keys %formats);
    my $usage_text = <<"USAGE";
使用法： $FindBin::Script [形式]
  使用可能な形式: $format_list
USAGE
    print {$usage_error ? *STDERR : *STDOUT} $usage_text;
    exit($usage_error ? 64 : 0);
}

binmode STDOUT, ':raw';
print encode($format->{encoding}, $format->{heading}, Encode::FB_CROAK);

my $shiftable_keys = '1234567890qwertyuiopasdfghjkl;zxcvbnm,./';
my $unshiftable_keys;
if (ReadCodes::keyboard_layout('jpn')) {
    $unshiftable_keys = q{ -^\@[:]_};
} else {
    $unshiftable_keys = q{ -=\[]'`};
}

# 漢直Win1.28で導入された矢印定義を使えば、一行ごとに一つのコードを定義するこ
# とが出来ます。文字１つは"-%d>"で表記されていて、%dは漢直Ｗｉｎにおけるキーイ
# ンデックス。
my %key_replacements;
if ($format_name eq 'kanchoku_win') {
    my $index = 0;
    for my $shiftable (split q{}, $shiftable_keys) {
        $key_replacements{$shiftable} = "-${index}>";
        $shiftable = ReadCodes::shift_last_char($shiftable);
        $key_replacements{$shiftable} = "-S${index}>";
        $index++;
    }
    for my $unshiftable (split q{}, $unshiftable_keys) {
        $key_replacements{$unshiftable} = "-${index}>";
        $index++;
    }
}

my $code_map = CodeMap->new();

ReadCodes::process_lines {
    my ($key, $value, %notes_by_prefix) = @_;
    $code_map->register(
        $key, ReadCodes::sorted_variants($value, %notes_by_prefix));
};
$code_map->register_autogenerated_codes(%{$format->{autogen_args}});

sub output_codes {
    my ($prefix) = @_;
    my $value = $code_map->lookup($prefix);
    if ($value) {
        for my $key_char (split q{}, $prefix) {
            print $key_replacements{$key_char} // $key_char;
        }
        # Shift-JISでは《¥》が《\》になってしまうので、エスケープしなければな
        # らない。
        if ($format->{encoding} eq 'cp932') {
            $value =~ s{¥}{\\\\}g;
        }

        my $buffer = $value;
        $value = q{};
        while (1) {
            $value .= encode($format->{encoding}, $buffer, Encode::FB_QUIET);
            last if !$buffer;
            my $bad_char;
            ($bad_char, $buffer) = split(q{}, $buffer, 2);
            $value .= sprintf "U+%X", ord($bad_char);
        }

        printf $format->{value_format}, $value;
        return;
    }

    # 未割り当て漢字を表示しない。
    return if length($prefix) > 3;

    return if $prefix && !$code_map->is_code_prefix($prefix);

    for my $shiftable_key (split q{}, $shiftable_keys) {
        my $concated = $prefix . $shiftable_key;
        output_codes($concated);
        $concated = ReadCodes::shift_last_char($concated);
        output_codes($concated);
    }
    for my $unshiftable_key (split q{}, $unshiftable_keys) {
        my $concated = $prefix . $unshiftable_key;
        output_codes($concated);
    }
}

output_codes q{};
